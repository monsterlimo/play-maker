<!DOCTYPE html>
<html>
<head>
  <title>A5 Programme Generator</title>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <div class="container">
    <h1>A5 Programme Generator</h1>
    <button id="loadSampleBtn" type="button" style="margin-bottom:18px;">Load Sample Data</button>
    <button id="clearFormBtn" type="button" style="margin-bottom:18px; margin-left:10px; background:#dc3545;">Reset/Clear</button>
    <form id="programmeForm" action="/generate" method="POST" enctype="multipart/form-data">
      
      <!-- General Settings -->
      <fieldset class="form-section">
        <legend>General Settings</legend>
        <label for="theme">Theme:</label>
        <select id="theme" name="theme" required>
          <option value="classic">Classic</option>
          <option value="fairy">Fairy</option>
          <option value="forest">Forest</option>
          <option value="arabian">Arabian</option>
          <option value="spy">Spy</option>
          <option value="drama">Drama</option>
        </select><br>

        <label for="playName">Play Name:</label>
        <input type="text" id="playName" name="playName" required placeholder="e.g. Romeo & Juliet"><br>

        <label for="date">Date:</label>
        <input type="text" id="date" name="date" required placeholder="e.g. 12 March 2025"><br>

        <label for="venue">Venue:</label>
        <input type="text" id="venue" name="venue" required placeholder="e.g. Globe Theatre"><br>

        <label for="director">Director:</label>
        <input type="text" id="director" name="director" required placeholder="e.g. Jane Doe"><br>

        <label for="synopsis">Synopsis:</label>
        <textarea id="synopsis" name="synopsis" rows="4" cols="40" required placeholder="Brief summary of the play"></textarea><br>
      </fieldset>

      <!-- Front Cover Section -->
      <fieldset class="form-section">
        <legend>Front Cover</legend>
        <label for="logo">Logo Upload:</label>
        <input type="file" id="logo" name="logo" accept="image/*"><br>
        <div id="logo-preview"></div>
        
        <!-- Client feedback enhancement: Logo placement options -->
        <label for="logoPlacement">Logo Placement:</label>
        <select id="logoPlacement" name="logoPlacement">
          <option value="top-left">Top Left</option>
          <option value="top-center">Top Center</option>
          <option value="top-right">Top Right</option>
          <option value="middle-left">Middle Left</option>
          <option value="middle-center">Middle Center</option>
          <option value="middle-right">Middle Right</option>
        </select><br>

        <label for="coverImage">Cover Image:</label>
        <input type="file" id="coverImage" name="coverImage" accept="image/*"><br>
        <!-- AI artwork prototype - Generate AI artwork button -->
        <button type="button" id="generateAiArtworkBtn" style="margin: 10px 0; background: #6f42c1; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">üé® Generate AI Artwork</button>
        <div id="ai-artwork-status" style="margin: 5px 0; font-size: 0.9em; color: #666;"></div>
        <div id="cover-preview"></div>

        <!-- Company logo overlay feature - Logo overlay on cover image -->
        <div id="logo-overlay-section" style="margin-top: 20px; padding: 15px; border: 2px dashed #ddd; border-radius: 8px; background: #f9f9f9;">
          <h4 style="margin: 0 0 10px 0; color: #333;">Company Logo Overlay on Cover Image</h4>
          <label>
            <input type="checkbox" id="enableLogoOverlay" name="enableLogoOverlay" value="true">
            Enable logo overlay on cover image
          </label><br>
          
          <div id="logo-overlay-controls" style="margin-top: 10px; display: none;">
            <label for="overlayPosition">Logo Position on Cover:</label>
            <select id="overlayPosition" name="overlayPosition">
              <option value="top-left">Top Left</option>
              <option value="top-center">Top Center</option>
              <option value="top-right">Top Right</option>
              <option value="bottom-left">Bottom Left</option>
              <option value="bottom-right">Bottom Right</option>
              <option value="center">Center</option>
            </select><br>
            
            <label for="overlaySize">Logo Size:</label>
            <select id="overlaySize" name="overlaySize">
              <option value="small">Small (10%)</option>
              <option value="medium" selected>Medium (15%)</option>
              <option value="large">Large (20%)</option>
            </select><br>
            
            <div id="overlay-preview" style="margin-top: 15px; border: 1px solid #ccc; border-radius: 4px; background: #fff; position: relative; display: none;">
              <div style="text-align: center; padding: 10px; font-weight: bold; color: #666;">Cover Image + Logo Overlay Preview</div>
              <div id="overlay-preview-container" style="position: relative; display: inline-block; margin: 10px;">
                <!-- Preview will be inserted here by JavaScript -->
              </div>
            </div>
          </div>
        </div>

        <label>
          <input type="checkbox" id="overlayInfo" name="overlayInfo" value="true">
          Show overlay info on cover (uncheck if info is already in the image)
        </label><br>

        <label for="contactInfo">Contact Information:</label>
        <textarea id="contactInfo" name="contactInfo" rows="3" placeholder="Box office, phone, website, etc."></textarea><br>
      </fieldset>

      <!-- Credits Section -->
      <fieldset class="form-section">
        <legend>Credits</legend>


        <label>Cast:</label>
        <div id="cast-container"></div>
        <button id="addCastBtn" type="button">Add Cast Member</button>
        <br>

        <label>Crew:</label>
        <div id="crew-container"></div>
        <button id="addCrewBtn" type="button">Add Crew Member</button>
        <br>
      </fieldset>

      <!-- Director's Note Section -->
      <fieldset class="form-section">
        <legend>Director's Note</legend>
        <label for="directorNote">Director's Note:</label>
        <textarea id="directorNote" name="directorNote" rows="6" placeholder="Personal message from the director..."></textarea><br>

        <label for="directorPhoto">Director Photo:</label>
        <input type="file" id="directorPhoto" name="directorPhoto" accept="image/*"><br>
        <div id="director-photo-preview"></div>
      </fieldset>

      <!-- Adverts & Sponsors Section -->
      <fieldset class="form-section">
        <legend>Adverts & Sponsors</legend>
        <label>Adverts:</label>
        <div id="adverts-container"></div>
        <button id="addAdvertBtn" type="button">Add Advert</button>
        <br>

        <label for="sponsorInfo">Sponsor Information:</label>
        <textarea id="sponsorInfo" name="sponsorInfo" rows="4" placeholder="Thank you to our sponsors..."></textarea><br>
      </fieldset>

      <!-- Additional Photos Section -->
      <fieldset class="form-section">
        <legend>Additional Photos</legend>
        <label for="photos">Additional Photos (up to 4):</label>
        <input type="file" id="photos" name="photos" accept="image/*" multiple><br>
        <div id="photo-preview"></div>
        
        <!-- Client feedback enhancement: Photo captions -->
        <div id="photo-captions-container" style="margin-top: 15px;">
          <label>Photo Captions (optional):</label>
          <div id="photo-captions"></div>
        </div>
        <br>
      </fieldset>

      <button type="submit">Generate PDF</button>
    </form>
    <button id="previewBtn" type="button" style="margin-top:18px;">Preview Programme</button>
    <div id="programme-preview" style="margin-top:32px;"></div>
    <small>Tip: Use ‚ÄúLoad Sample Data‚Äù for quick testing. You can add/remove cast and crew rows. All fields are required for each person.</small>
  </div>
  <script>
    // Map theme to border path
    const themeBorders = {
      classic: '/theme-assets/classic-border.png',
      fairy: '/theme-assets/fairy-border.png',
      forest: '/theme-assets/forest-border.png',
      arabian: '/theme-assets/arabian-border.png',
      spy: '/theme-assets/spy-border.png',
      drama: '/theme-assets/drama-border.png'
    };

    function addRow(section, name = '', role = '', photoPath = '') {
      const container = document.getElementById(section + '-container');
      const count = container.children.length;
      if (count < 15) {
        const row = document.createElement('div');
        row.className = 'person-row';
        const castPhotoField = section === 'cast' ? `<input type="file" name="${section}Photo[]" accept="image/*" class="photo-input" placeholder="Photo"><div class="photo-preview-small"></div>` : '';
        row.innerHTML = `
          <input type="text" name="${section}Name[]" placeholder="Name" required value="${name}">
          <input type="text" name="${section}Role[]" placeholder="Role" required value="${role}">
          ${castPhotoField}
          <button type="button" class="removeBtn">Remove</button>
        `;
        container.appendChild(row);
        
        // Add event listener for photo preview if this is a cast member
        if (section === 'cast') {
          const photoInput = row.querySelector('.photo-input');
          const photoPreview = row.querySelector('.photo-preview-small');
          photoInput.addEventListener('change', function() {
            previewSinglePhoto(this, photoPreview);
          });
        }
      }
    }

    function previewSinglePhoto(input, previewContainer) {
      previewContainer.innerHTML = '';
      if (input.files && input.files[0]) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const img = document.createElement('img');
          img.src = e.target.result;
          img.style.maxWidth = "50px";
          img.style.maxHeight = "50px";
          img.style.borderRadius = "4px";
          previewContainer.appendChild(img);
        };
        reader.readAsDataURL(input.files[0]);
      }
    }

    function addAdvert(title = '') {
      const container = document.getElementById('adverts-container');
      const count = container.children.length;
      if (count < 10) {
        const row = document.createElement('div');
        row.className = 'advert-row';
        row.innerHTML = `
          <input type="text" name="advertTitle[]" placeholder="Advert Title" value="${title}">
          <input type="file" name="advertImage[]" accept="image/*" class="advert-image">
          <div class="advert-preview-small"></div>
          <button type="button" class="removeAdvertBtn">Remove</button>
        `;
        container.appendChild(row);
        
        // Add event listener for photo preview
        const photoInput = row.querySelector('.advert-image');
        const photoPreview = row.querySelector('.advert-preview-small');
        photoInput.addEventListener('change', function() {
          previewSinglePhoto(this, photoPreview);
        });
      }
    }

    function previewPhotos() {
      const input = document.getElementById('photos');
      const preview = document.getElementById('photo-preview');
      const captionsContainer = document.getElementById('photo-captions');
      preview.innerHTML = '';
      captionsContainer.innerHTML = ''; // Client feedback enhancement: Clear captions
      
      Array.from(input.files).forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = function(e) {
          const img = document.createElement('img');
          img.src = e.target.result;
          img.style.maxWidth = "100px";
          img.style.margin = "6px";
          preview.appendChild(img);
        };
        reader.readAsDataURL(file);
        
        // Client feedback enhancement: Add caption input for each photo
        const captionDiv = document.createElement('div');
        captionDiv.style.marginBottom = '8px';
        captionDiv.innerHTML = `
          <label for="photoCaption${index}" style="font-size: 0.9em;">Photo ${index + 1} Caption:</label>
          <input type="text" id="photoCaption${index}" name="photoCaption[]" placeholder="Optional caption for photo ${index + 1}" style="width: 100%; margin-top: 4px;">
        `;
        captionsContainer.appendChild(captionDiv);
      });
    }

    function previewLogo() {
      const input = document.getElementById('logo');
      const preview = document.getElementById('logo-preview');
      previewSinglePhoto(input, preview);
    }

    function previewCover() {
      const input = document.getElementById('coverImage');
      const preview = document.getElementById('cover-preview');
      previewSinglePhoto(input, preview);
    }

    function previewDirectorPhoto() {
      const input = document.getElementById('directorPhoto');
      const preview = document.getElementById('director-photo-preview');
      previewSinglePhoto(input, preview);
    }

    // Company logo overlay feature - Logo overlay preview and positioning
    function updateLogoOverlayPreview() {
      const coverInput = document.getElementById('coverImage');
      const logoInput = document.getElementById('logo');
      const overlayEnabled = document.getElementById('enableLogoOverlay').checked;
      const overlayPreview = document.getElementById('overlay-preview');
      const overlayContainer = document.getElementById('overlay-preview-container');
      
      if (!overlayEnabled || !coverInput.files[0] || !logoInput.files[0]) {
        overlayPreview.style.display = 'none';
        return;
      }
      
      overlayPreview.style.display = 'block';
      
      const coverFile = coverInput.files[0];
      const logoFile = logoInput.files[0];
      const position = document.getElementById('overlayPosition').value;
      const size = document.getElementById('overlaySize').value;
      
      // Create cover image preview
      const coverReader = new FileReader();
      coverReader.onload = function(e) {
        // Create logo preview
        const logoReader = new FileReader();
        logoReader.onload = function(logoE) {
          // Calculate logo size based on selection
          const sizeMap = { small: '10%', medium: '15%', large: '20%' };
          const logoSize = sizeMap[size];
          
          // Calculate position styles
          let positionStyles = '';
          switch(position) {
            case 'top-left':
              positionStyles = 'top: 10px; left: 10px;';
              break;
            case 'top-center':
              positionStyles = 'top: 10px; left: 50%; transform: translateX(-50%);';
              break;
            case 'top-right':
              positionStyles = 'top: 10px; right: 10px;';
              break;
            case 'bottom-left':
              positionStyles = 'bottom: 10px; left: 10px;';
              break;
            case 'bottom-right':
              positionStyles = 'bottom: 10px; right: 10px;';
              break;
            case 'center':
              positionStyles = 'top: 50%; left: 50%; transform: translate(-50%, -50%);';
              break;
          }
          
          overlayContainer.innerHTML = `
            <div style="position: relative; display: inline-block;">
              <img src="${e.target.result}" style="max-width: 300px; max-height: 400px; display: block; border-radius: 4px;" alt="Cover preview">
              <img src="${logoE.target.result}" style="position: absolute; ${positionStyles} max-width: ${logoSize}; max-height: ${logoSize}; z-index: 10; border-radius: 2px; box-shadow: 0 2px 4px rgba(0,0,0,0.3);" alt="Logo overlay">
            </div>
          `;
        };
        logoReader.readAsDataURL(logoFile);
      };
      coverReader.readAsDataURL(coverFile);
    }

    function toggleLogoOverlayControls() {
      const enabled = document.getElementById('enableLogoOverlay').checked;
      const controls = document.getElementById('logo-overlay-controls');
      controls.style.display = enabled ? 'block' : 'none';
      
      if (enabled) {
        updateLogoOverlayPreview();
      } else {
        document.getElementById('overlay-preview').style.display = 'none';
      }
    }

    function loadSample() {
      document.getElementById('theme').value = 'fairy';
      document.getElementById('playName').value = 'The Enchanted Woods';
      document.getElementById('date').value = '25 October 2025';
      document.getElementById('venue').value = 'Mystic Grove Theatre';
      document.getElementById('director').value = 'Faye Moon';
      document.getElementById('synopsis').value = 'A magical journey through a forest of dreams where fairies help lost travellers discover their true selves.';

      // Front cover section
      document.getElementById('overlayInfo').checked = true;
      document.getElementById('contactInfo').value = 'Box Office: 555-MAGIC\nwww.mysticgrove.com\nTickets ¬£15-25';

      // Director's note
      document.getElementById('directorNote').value = 'Welcome to our magical world! This production has been a labour of love, bringing together talented performers to create something truly special. We hope you enjoy this enchanting journey.';

      // Sponsor info
      document.getElementById('sponsorInfo').value = 'Special thanks to our sponsors: Moonbeam Catering, Starlight Costumes, and the Arts Council for their generous support.';

      // Clear existing rows
      document.getElementById('cast-container').innerHTML = '';
      document.getElementById('crew-container').innerHTML = '';
      document.getElementById('adverts-container').innerHTML = '';

      // Add sample cast
      addRow('cast', 'Luna Stardust', 'Fairy Queen');
      addRow('cast', 'Rowan Leaf', 'Lost Traveller');
      addRow('cast', 'Moss Green', 'Forest Guardian');

      // Add sample crew
      addRow('crew', 'Willow Fern', 'Stage Manager');
      addRow('crew', 'Bramble Root', 'Set Designer');
      addRow('crew', 'Sunny Dew', 'Lighting');

      // Add sample adverts
      addAdvert('Moonbeam Catering');
      addAdvert('Starlight Costumes');

      // Clear photo previews
      document.getElementById('photo-preview').innerHTML = '';
      document.getElementById('logo-preview').innerHTML = '';
      document.getElementById('cover-preview').innerHTML = '';
      document.getElementById('director-photo-preview').innerHTML = '';
      
      showPreview(); // Update preview
    }

    function clearForm() {
      // Clear all text inputs and textareas
      document.getElementById('playName').value = '';
      document.getElementById('date').value = '';
      document.getElementById('venue').value = '';
      document.getElementById('director').value = '';
      document.getElementById('synopsis').value = '';
      document.getElementById('contactInfo').value = '';
      document.getElementById('directorNote').value = '';
      document.getElementById('sponsorInfo').value = '';

      // Reset selects to default values
      document.getElementById('theme').value = 'classic';

      // Reset checkboxes
      document.getElementById('overlayInfo').checked = false;

      // Clear all file inputs
      document.getElementById('logo').value = '';
      document.getElementById('coverImage').value = '';
      document.getElementById('directorPhoto').value = '';
      document.getElementById('photos').value = '';

      // Clear all image previews
      document.getElementById('photo-preview').innerHTML = '';
      document.getElementById('logo-preview').innerHTML = '';
      document.getElementById('cover-preview').innerHTML = '';
      document.getElementById('director-photo-preview').innerHTML = '';

      // Clear dynamic rows and reset to initial state
      document.getElementById('cast-container').innerHTML = '';
      document.getElementById('crew-container').innerHTML = '';
      document.getElementById('adverts-container').innerHTML = '';

      // Add one empty cast and crew row to start with
      addRow('cast');
      addRow('crew');

      // Clear any existing advert photo previews
      const advertPreviews = document.querySelectorAll('.advert-preview-small');
      advertPreviews.forEach(preview => preview.innerHTML = '');

      // Clear the programme preview
      document.getElementById('programme-preview').innerHTML = '';
      
      showPreview(); // Update preview to show empty state
    }

    // Live HTML preview
    function showPreview() {
      const theme = document.getElementById('theme').value;
      const playName = document.getElementById('playName').value;
      const date = document.getElementById('date').value;
      const venue = document.getElementById('venue').value;
      const director = document.getElementById('director').value;
      const synopsis = document.getElementById('synopsis').value;
      const contactInfo = document.getElementById('contactInfo').value;
      const directorNote = document.getElementById('directorNote').value;
      const sponsorInfo = document.getElementById('sponsorInfo').value;
      const overlayInfo = document.getElementById('overlayInfo').checked;

      // Cast & Crew
      const castRows = document.querySelectorAll('#cast-container .person-row');
      const cast = Array.from(castRows).map(row => {
        const name = row.querySelector('input[name="castName[]"]').value;
        const role = row.querySelector('input[name="castRole[]"]').value;
        const photoInput = row.querySelector('input[name="castPhoto[]"]');
        const hasPhoto = photoInput && photoInput.files && photoInput.files[0];
        return { name, role, hasPhoto };
      });
      
      const crewRows = document.querySelectorAll('#crew-container .person-row');
      const crew = Array.from(crewRows).map(row => {
        const name = row.querySelector('input[name="crewName[]"]').value;
        const role = row.querySelector('input[name="crewRole[]"]').value;
        return { name, role };
      });

      // Adverts
      const advertRows = document.querySelectorAll('#adverts-container .advert-row');
      const adverts = Array.from(advertRows).map(row => {
        const title = row.querySelector('input[name="advertTitle[]"]').value;
        const imageInput = row.querySelector('input[name="advertImage[]"]');
        const hasImage = imageInput && imageInput.files && imageInput.files[0];
        return { title, hasImage };
      });

      // Photos (preview only already selected files)
      const photoInput = document.getElementById('photos');
      let photosHtml = '';
      if (photoInput.files.length) {
        for (let i = 0; i < photoInput.files.length; i++) {
          const file = photoInput.files[i];
          const url = URL.createObjectURL(file);
          photosHtml += `<img src="${url}" style="max-width:120px; margin:8px; border-radius:7px; border:2px solid #ccc;">`;
        }
      }

      // Cover and logo previews
      const logoInput = document.getElementById('logo');
      const coverInput = document.getElementById('coverImage');
      const directorPhotoInput = document.getElementById('directorPhoto');
      
      let logoHtml = '';
      let coverHtml = '';
      let directorPhotoHtml = '';
      
      if (logoInput.files && logoInput.files[0]) {
        const url = URL.createObjectURL(logoInput.files[0]);
        logoHtml = `<img src="${url}" style="max-width:80px; height:auto; margin:8px;">`;
      }
      
      if (coverInput.files && coverInput.files[0]) {
        const url = URL.createObjectURL(coverInput.files[0]);
        coverHtml = `<img src="${url}" style="max-width:200px; height:auto; margin:8px; border-radius:7px;">`;
      }
      
      if (directorPhotoInput.files && directorPhotoInput.files[0]) {
        const url = URL.createObjectURL(directorPhotoInput.files[0]);
        directorPhotoHtml = `<img src="${url}" style="max-width:120px; height:auto; margin:8px; border-radius:7px;">`;
      }

      // Client feedback enhancement: Updated theme colors for better contrast
      const themeStyles = {
        classic: { bg: '#ffffff', heading: '#1a1a1a', accent: '#0056b3', color: '#2c2c2c' },
        fairy:   { bg: '#fce4ec', heading: '#2e0854', accent: '#8e24aa', color: '#4a148c' },
        forest:  { bg: '#e8f5e8', heading: '#0d4014', accent: '#388e3c', color: '#1b5e20' },
        arabian: { bg: '#fff8e1', heading: '#bf360c', accent: '#ff9800', color: '#e65100' },
        spy:     { bg: '#f5f5f5', heading: '#000000', accent: '#424242', color: '#212121' },
        drama:   { bg: '#ffebee', heading: '#7f0000', accent: '#d32f2f', color: '#b71c1c' }
      };
      const t = themeStyles[theme] || themeStyles.classic;

      // Border image
      const borderImg = themeBorders[theme] ? `<img src="${themeBorders[theme]}" class="border-img" alt="Theme border" style="width:100%;max-width:700px;height:24px;display:block;margin-bottom:18px;">` : '';

      // Cast display - always use centered list layout
      let castHtml = '';
      castHtml = cast.map(c => `<li>${c.name} <span style="color:#888;">(${c.role})</span></li>`).join('');
      castHtml = `<ul style="padding-left:0; text-align:center; list-style:none;">${castHtml}</ul>`;

      document.getElementById('programme-preview').innerHTML = `
        <div style="background:${t.bg};border-radius:12px;padding:32px;box-shadow:0 0 16px #eee;">
          
          <!-- Front Cover Section -->
          <div style="margin-bottom:30px; border-bottom:2px solid ${t.accent}; padding-bottom:20px;">
            <h2 style="color:${t.heading}; margin:0;">Front Cover</h2>
            ${logoHtml ? `<div>Logo: ${logoHtml}</div>` : ''}
            ${coverHtml ? `<div>Cover Image: ${coverHtml}</div>` : ''}
            ${overlayInfo ? `
              <div style="margin-top:15px;">
                ${borderImg}
                <h2 style="color:${t.heading};margin-bottom:0;">${playName}</h2>
                <div style="margin-bottom:10px;">
                  <span style="color:${t.accent};font-weight:bold;">${date}</span> |
                  <span style="color:${t.accent};font-weight:bold;">${venue}</span> |
                  <span style="color:${t.accent};font-weight:bold;">Director: ${director}</span>
                </div>
                ${contactInfo ? `<div style="margin-top:10px; font-size:14px; color:${t.heading};">${contactInfo.replace(/\n/g, '<br>')}</div>` : ''}
              </div>
            ` : ''}
          </div>
          
          <!-- Synopsis Section -->
          <div style="margin-bottom:30px;">
            <h3 style="color:${t.heading};">Synopsis</h3>
            <p style="color:${t.color};">${synopsis}</p>
          </div>
          
          <!-- Credits Section -->
          <div style="margin-bottom:30px;">
            <h3 style="color:${t.heading};">Cast</h3>
            ${castHtml}
            <h3 style="color:${t.heading};margin-top:18px;">Crew</h3>
            <ul style="padding-left:0; text-align:center; list-style:none;">${crew.map(c=>`<li>${c.name} <span style="color:#888;">(${c.role})</span></li>`).join('')}</ul>
          </div>
          
          <!-- Director's Note Section -->
          ${directorNote ? `
            <div style="margin-bottom:30px;">
              <h3 style="color:${t.heading};">Director's Note</h3>
              <div style="display:flex; gap:15px; align-items:flex-start;">
                ${directorPhotoHtml}
                <div style="flex:1;">
                  <p style="font-style:italic;">${directorNote.replace(/\n/g, '<br>')}</p>
                  <p style="text-align:right; margin-top:10px; font-weight:bold;">- ${director}</p>
                </div>
              </div>
            </div>
          ` : ''}
          
          <!-- Adverts Section -->
          ${adverts.length > 0 ? `
            <div style="margin-bottom:30px;">
              <h3 style="color:${t.heading};">Adverts</h3>
              <div style="display:grid; grid-template-columns:repeat(auto-fit, minmax(200px, 1fr)); gap:15px;">
                ${adverts.map(a => `
                  <div style="border:1px solid #ddd; padding:15px; border-radius:5px; background:#fff;">
                    <div style="font-weight:bold; margin-bottom:5px; text-align:center;">${a.title}</div>
                    ${a.hasImage ? '<div style="background:#eee; height:80px; display:flex; align-items:center; justify-content:center; margin-top:5px; border-radius:3px;">Ad Image</div>' : '<div style="background:#f5f5f5; height:80px; display:flex; align-items:center; justify-content:center; margin-top:5px; border-radius:3px; color:#999;">No Image</div>'}
                  </div>
                `).join('')}
              </div>
            </div>
          ` : ''}
          
          <!-- Sponsor Section -->
          ${sponsorInfo ? `
            <div style="margin-bottom:30px;">
              <h3 style="color:${t.heading};">Sponsors</h3>
              <p>${sponsorInfo.replace(/\n/g, '<br>')}</p>
            </div>
          ` : ''}
          
          <!-- Additional Photos Section -->
          ${photosHtml ? `
            <div>
              <h3 style="color:${t.heading};">Additional Photos</h3>
              <div>${photosHtml}</div>
            </div>
          ` : ''}
        </div>
      `;
    }

    // AI artwork prototype - Generate AI artwork function
    async function generateAiArtwork() {
      const playName = document.getElementById('playName').value;
      const synopsis = document.getElementById('synopsis').value;
      const theme = document.getElementById('theme').value;
      const statusDiv = document.getElementById('ai-artwork-status');
      const generateBtn = document.getElementById('generateAiArtworkBtn');
      
      if (!playName || !synopsis) {
        statusDiv.innerHTML = '<span style="color: red;">Please fill in play name and synopsis first.</span>';
        return;
      }
      
      // Disable button and show loading state
      generateBtn.disabled = true;
      generateBtn.innerHTML = 'üé® Generating...';
      statusDiv.innerHTML = '<span style="color: blue;">Generating AI artwork... This may take 10-30 seconds.</span>';
      
      try {
        const response = await fetch('/generate-ai-artwork', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ playName, synopsis, theme })
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Show the generated image
          const coverPreview = document.getElementById('cover-preview');
          coverPreview.innerHTML = `
            <div style="border: 2px solid #6f42c1; border-radius: 8px; padding: 10px; margin: 10px 0; background: #f8f9fa;">
              <strong>Generated AI Artwork:</strong><br>
              <img src="${result.imageUrl}" style="max-width: 200px; height: auto; margin: 8px; border-radius: 7px;" alt="Generated artwork">
              <br>
              <button type="button" id="useAiArtworkBtn" style="background: #28a745; color: white; padding: 6px 12px; border: none; border-radius: 4px; cursor: pointer; margin: 5px;">Use as Cover Image</button>
              <div style="font-size: 0.8em; color: #666; margin-top: 5px;">Prompt: ${result.prompt}</div>
            </div>
          `;
          
          // Add event listener for "Use as Cover Image" button
          document.getElementById('useAiArtworkBtn').addEventListener('click', function() {
            // Create a hidden file input to simulate file selection
            fetch(result.imageUrl)
              .then(res => res.blob())
              .then(blob => {
                const file = new File([blob], 'ai-generated-artwork.png', { type: 'image/png' });
                const dt = new DataTransfer();
                dt.items.add(file);
                document.getElementById('coverImage').files = dt.files;
                
                // Trigger the change event to update preview
                document.getElementById('coverImage').dispatchEvent(new Event('change'));
                statusDiv.innerHTML = '<span style="color: green;">AI artwork set as cover image!</span>';
              });
          });
          
          statusDiv.innerHTML = '<span style="color: green;">AI artwork generated successfully!</span>';
        } else {
          statusDiv.innerHTML = `<span style="color: orange;">${result.error}</span>`;
        }
      } catch (error) {
        console.error('Error generating AI artwork:', error);
        statusDiv.innerHTML = '<span style="color: red;">Error generating AI artwork. Please try again.</span>';
      }
      
      // Re-enable button
      generateBtn.disabled = false;
      generateBtn.innerHTML = 'üé® Generate AI Artwork';
    }

    window.onload = function() {
      addRow('cast');
      addRow('crew');
      document.getElementById('loadSampleBtn').addEventListener('click', loadSample);
      document.getElementById('clearFormBtn').addEventListener('click', clearForm);
      document.getElementById('addCastBtn').addEventListener('click', function() { addRow('cast'); });
      document.getElementById('addCrewBtn').addEventListener('click', function() { addRow('crew'); });
      document.getElementById('addAdvertBtn').addEventListener('click', function() { addAdvert(); });
      document.getElementById('previewBtn').addEventListener('click', showPreview);
      
      // AI artwork prototype - Event listener for AI artwork generation
      document.getElementById('generateAiArtworkBtn').addEventListener('click', generateAiArtwork);
      
      // Photo preview event listeners
      document.getElementById('photos').addEventListener('change', function() {
        previewPhotos();
        showPreview();
      });
      document.getElementById('logo').addEventListener('change', function() {
        previewLogo();
        updateLogoOverlayPreview(); // Company logo overlay feature
        showPreview();
      });
      document.getElementById('coverImage').addEventListener('change', function() {
        previewCover();
        updateLogoOverlayPreview(); // Company logo overlay feature
        showPreview();
      });
      document.getElementById('directorPhoto').addEventListener('change', function() {
        previewDirectorPhoto();
        showPreview();
      });
      
      // Company logo overlay feature - Event listeners for logo overlay controls
      document.getElementById('enableLogoOverlay').addEventListener('change', toggleLogoOverlayControls);
      document.getElementById('overlayPosition').addEventListener('change', updateLogoOverlayPreview);
      document.getElementById('overlaySize').addEventListener('change', updateLogoOverlayPreview);
      
      // Form input event listener for live preview
      document.getElementById('programmeForm').addEventListener('input', showPreview);
      document.getElementById('programmeForm').addEventListener('change', showPreview);

      // Remove cast/crew row
      document.getElementById('cast-container').addEventListener('click', function(e) {
        if (e.target.classList.contains('removeBtn')) {
          e.target.parentNode.remove();
          showPreview();
        }
      });
      document.getElementById('crew-container').addEventListener('click', function(e) {
        if (e.target.classList.contains('removeBtn')) {
          e.target.parentNode.remove();
          showPreview();
        }
      });
      
      // Remove advert
      document.getElementById('adverts-container').addEventListener('click', function(e) {
        if (e.target.classList.contains('removeAdvertBtn')) {
          e.target.parentNode.remove();
          showPreview();
        }
      });
    };
  </script>
</body>
</html>