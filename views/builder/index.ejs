<!DOCTYPE html>
<html>
<head>
  <title>Programme Builder - A5 Programme Generator</title>
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/a5-preview.css">
  <style>
    /* Programme builder enhancement - Professional UI styling inspired by theatre graphics */
    .builder-container {
      max-width: 1200px;
      margin: 20px auto;
      padding: 20px;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .builder-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
      padding: 25px 30px;
      background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
      color: white;
      border-radius: 12px;
      box-shadow: 0 8px 32px rgba(30, 60, 114, 0.3);
    }
    
    .builder-header h1 {
      margin: 0;
      font-size: 2.2em;
      font-weight: 700;
      letter-spacing: -0.5px;
    }
    
    .builder-header p {
      margin: 5px 0 0 0;
      opacity: 0.9;
      font-size: 1.1em;
    }
    
    .builder-nav {
      display: flex;
      gap: 15px;
    }
    
    .nav-button {
      padding: 12px 24px;
      background: rgba(255, 255, 255, 0.15);
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 8px;
      text-decoration: none;
      color: white;
      font-weight: 600;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
    }
    
    .nav-button:hover, .nav-button.active {
      background: rgba(255, 255, 255, 0.25);
      border-color: rgba(255, 255, 255, 0.5);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }
    
    .builder-main {
      display: grid;
      grid-template-columns: 380px 1fr 370px; /* Fixed 370px for A5 preview */
      gap: 30px;
    }
    
    .sidebar {
      background: white;
      border: none;
      border-radius: 16px;
      padding: 25px;
      height: fit-content;
      position: sticky;
      top: 20px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
    }
    
    .sidebar h4 {
      margin: 0 0 20px 0;
      font-size: 1.3em;
      font-weight: 700;
      color: #1e3c72;
      border-bottom: 3px solid #e3f2fd;
      padding-bottom: 10px;
    }
    
    .page-templates {
      margin-bottom: 35px;
    }
    
    .template-button {
      display: block;
      width: 100%;
      padding: 18px 20px;
      margin-bottom: 12px;
      background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
      border: 2px solid #e9ecef;
      border-radius: 12px;
      text-align: left;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }
    
    .template-button:hover {
      border-color: #1e3c72;
      background: linear-gradient(135deg, #e3f2fd 0%, #f8f9ff 100%);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(30, 60, 114, 0.15);
    }
    
    .template-title {
      font-weight: 700;
      font-size: 1.1em;
      color: #1e3c72;
      margin-bottom: 6px;
    }
    
    .template-description {
      font-size: 0.95em;
      color: #495057;
      margin: 0;
      line-height: 1.4;
    }
    
    .pages-list {
      border-top: 3px solid #e3f2fd;
      padding-top: 25px;
    }
    
    .page-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px;
      margin-bottom: 10px;
      background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
      border: 2px solid #e9ecef;
      border-radius: 10px;
      cursor: move;
      transition: all 0.3s ease;
    }
    
    .page-item:hover {
      border-color: #1e3c72;
      box-shadow: 0 4px 15px rgba(30, 60, 114, 0.1);
    }
    
    .page-item.dragging {
      opacity: 0.6;
      transform: rotate(3deg);
    }
    
    .page-info {
      flex: 1;
    }
    
    .page-title {
      font-weight: 700;
      font-size: 1.05em;
      color: #1e3c72;
      margin-bottom: 4px;
    }
    
    .page-type {
      font-size: 0.85em;
      color: #6c757d;
      font-weight: 500;
    }
    
    .page-actions {
      display: flex;
      gap: 6px;
    }
    
    .page-action {
      padding: 6px 12px;
      font-size: 0.8em;
      font-weight: 600;
      border-radius: 6px;
      border: none;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .edit-btn {
      background: #28a745;
      color: white;
    }
    
    .edit-btn:hover {
      background: #218838;
      transform: translateY(-1px);
    }
    
    .preview-btn {
      background: #17a2b8;
      color: white;
    }
    
    .preview-btn:hover {
      background: #138496;
      transform: translateY(-1px);
    }
    
    .delete-btn {
      background: #dc3545;
      color: white;
    }
    
    .delete-btn:hover {
      background: #c82333;
      transform: translateY(-1px);
    }
    
    .content-area {
      background: white;
      border: none;
      border-radius: 16px;
      padding: 35px;
      min-height: 600px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
    }
    
    .empty-state {
      text-align: center;
      color: #6c757d;
      padding: 80px 20px;
    }
    
    .empty-state h3 {
      color: #1e3c72;
      margin-bottom: 20px;
      font-size: 1.8em;
      font-weight: 700;
    }
    
    .empty-state p {
      font-size: 1.1em;
      line-height: 1.6;
      max-width: 500px;
      margin: 0 auto 15px auto;
    }
    
    .page-editor {
      display: none;
    }
    
    .page-editor.active {
      display: block;
    }
    
    .page-editor h3 {
      color: #1e3c72;
      font-size: 1.8em;
      font-weight: 700;
      margin: 0 0 25px 0;
      padding-bottom: 15px;
      border-bottom: 3px solid #e3f2fd;
    }
    
    .form-group {
      margin-bottom: 25px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 700;
      color: #1e3c72;
      font-size: 1.05em;
    }
    
    .form-group input,
    .form-group textarea,
    .form-group select {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #e9ecef;
      border-radius: 8px;
      font-size: 15px;
      box-sizing: border-box;
      transition: all 0.2s ease;
      font-family: inherit;
    }
    
    .form-group input:focus,
    .form-group textarea:focus,
    .form-group select:focus {
      border-color: #1e3c72;
      outline: none;
      box-shadow: 0 0 0 3px rgba(30, 60, 114, 0.1);
    }
    
    .form-group textarea {
      resize: vertical;
      min-height: 120px;
      line-height: 1.6;
    }
    
    /* Programme builder enhancement - Color picker styling */
    .color-controls {
      background: linear-gradient(135deg, #f8f9fa 0%, #e3f2fd 100%);
      border: 2px solid #e3f2fd !important;
      border-radius: 12px !important;
      padding: 20px !important;
      margin-bottom: 25px !important;
    }
    
    .color-controls .form-group {
      margin-bottom: 0 !important;
    }
    
    .color-controls label {
      font-size: 0.95em !important;
      font-weight: 600 !important;
      color: #1e3c72 !important;
    }
    
    input[type="color"] {
      height: 45px !important;
      border: 2px solid #dee2e6 !important;
      border-radius: 8px !important;
      cursor: pointer !important;
      padding: 2px !important;
    }
    
    input[type="color"]:hover {
      border-color: #1e3c72 !important;
    }
    
    .image-upload {
      border: 3px dashed #dee2e6;
      border-radius: 12px;
      padding: 25px;
      text-align: center;
      background: linear-gradient(135deg, #fafafa 0%, #ffffff 100%);
      cursor: pointer;
      transition: all 0.3s ease;
      color: #6c757d;
      font-weight: 600;
    }
    
    .image-upload:hover {
      border-color: #1e3c72;
      background: linear-gradient(135deg, #e3f2fd 0%, #f8f9ff 100%);
      color: #1e3c72;
    }
    
    .image-upload.has-image {
      border-style: solid;
      border-color: #28a745;
      background: linear-gradient(135deg, #e6ffed 0%, #f0fff4 100%);
    }
    
    .image-preview {
      max-width: 250px;
      max-height: 200px;
      border-radius: 8px;
      margin-top: 15px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .editor-actions {
      display: flex;
      gap: 15px;
      margin-top: 35px;
      padding-top: 25px;
      border-top: 3px solid #e3f2fd;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
      color: white;
      border: none;
      padding: 14px 28px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 15px;
      font-weight: 700;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(30, 60, 114, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(30, 60, 114, 0.4);
    }
    
    .btn-secondary {
      background: #6c757d;
      color: white;
      border: none;
      padding: 14px 28px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 15px;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .btn-secondary:hover {
      background: #5a6268;
      transform: translateY(-2px);
    }
    
    .btn-success {
      background: linear-gradient(135deg, #28a745 0%, #34ce57 100%);
      color: white;
      border: none;
      padding: 14px 30px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 16px;
      font-weight: 700;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
    }
    
    .btn-success:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
    }
    
    .live-preview {
      border: 2px solid #e9ecef;
      border-radius: 12px;
      padding: 25px;
      margin-top: 25px;
      background: linear-gradient(135deg, #fafafa 0%, #ffffff 100%);
      min-height: 200px;
    }
    
    .theme-selector {
      margin-bottom: 25px;
    }
    
    .theme-selector select {
      background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
      font-weight: 600;
      color: #1e3c72;
    }
    
    /* Programme builder enhancement - A5 Preview Pane */
    .a5-preview-pane {
      background: white;
      border-radius: 16px;
      padding: 25px;
      height: fit-content;
      position: sticky;
      top: 20px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
      /* Strict sizing - never allow responsive shrinking */
      min-width: 370px !important; /* 320px container + 50px padding */
      width: 370px !important;
      flex-shrink: 0 !important;
      flex-grow: 0 !important;
    }

    @media (max-width: 1500px) {
      .builder-main {
        grid-template-columns: 360px 1fr;
      }
      
      .a5-preview-pane {
        display: none;
      }
    }

    @media (max-width: 1024px) {
      .builder-main {
        grid-template-columns: 1fr;
      }
      
      .sidebar {
        position: static;
        order: 2;
      }
      
      .builder-header {
        flex-direction: column;
        gap: 20px;
        text-align: center;
      }
      
      .builder-nav {
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <div class="builder-container">
    <!-- Header -->
    <div class="builder-header">
      <div>
        <h1>Programme Builder</h1>
        <p style="margin: 0; color: #666;">Create custom programmes with flexible page layouts</p>
      </div>
      <div class="builder-nav">
        <a href="/" class="nav-button">← Back to Start</a>
        <button id="previewProgrammeBtn" class="nav-button">Preview Programme</button>
        <button id="exportProgrammeBtn" class="btn-success">Export PDF</button>
      </div>
    </div>
    
    <!-- Main Content -->
    <div class="builder-main">
      <!-- Sidebar -->
      <div class="sidebar">
        <!-- Theme Selector -->
        <div class="theme-selector">
          <h4>Programme Theme</h4>
          <select id="programmeTheme">
            <option value="classic">Classic</option>
            <option value="fairy">Fairy</option>
            <option value="forest">Forest</option>
            <option value="arabian">Arabian</option>
            <option value="spy">Spy</option>
            <option value="drama">Drama</option>
          </select>
        </div>
        
        <!-- Page Templates -->
        <!-- Programme builder enhancement - Restricted to 4 page templates only -->
        <div class="page-templates">
          <h4>Add New Page</h4>
          <button class="template-button" data-template="cover">
            <div class="template-title">📄 Cover</div>
            <div class="template-description">Main info, cover image</div>
          </button>
          
          <button class="template-button" data-template="paragraph">
            <div class="template-title">📝 Paragraph</div>
            <div class="template-description">Text with optional image</div>
          </button>
          
          <button class="template-button" data-template="credits">
            <div class="template-title">📋 List</div>
            <div class="template-description">Centralised credits or lists</div>
          </button>
          
          <button class="template-button" data-template="image-gallery">
            <div class="template-title">🖼️ Image Gallery</div>
            <div class="template-description">1-4 images per page</div>
          </button>
        </div>
        
        <!-- Pages List -->
        <div class="pages-list">
          <h4>Programme Pages (<span id="pageCount">0</span>)</h4>
          <div id="pagesList">
            <!-- Pages will be added here dynamically -->
          </div>
        </div>
      </div>
      
      <!-- Content Area -->
      <div class="content-area">
        <div id="emptyState" class="empty-state">
          <h3>📚 Start Building Your Programme</h3>
          <p>Select a page template from the sidebar to begin creating your programme.</p>
          <p>You can add multiple pages, reorder them, and preview each page as you build.</p>
        </div>
        
        <!-- Page Editors (hidden by default) -->
        <div id="coverEditor" class="page-editor">
          <h3>📄 Cover Page</h3>
          
          <!-- Programme builder enhancement - Per-page color customization -->
          <div class="color-controls" style="display: flex; gap: 20px; margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 6px; border: 1px solid #e0e0e0;">
            <div class="form-group" style="margin-bottom: 0; flex: 1;">
              <label style="margin-bottom: 5px; font-size: 0.9em;">Background Color</label>
              <input type="color" id="coverBackgroundColor" value="#ffffff" style="width: 100%; height: 40px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
            </div>
            <div class="form-group" style="margin-bottom: 0; flex: 1;">
              <label style="margin-bottom: 5px; font-size: 0.9em;">Text Color</label>
              <input type="color" id="coverTextColor" value="#2c2c2c" style="width: 100%; height: 40px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
            </div>
          </div>
          
          <div class="form-group">
            <label>Play Name</label>
            <input type="text" id="coverPlayName" placeholder="Enter play name">
          </div>
          <div class="form-group">
            <label>Date</label>
            <input type="text" id="coverDate" placeholder="e.g. 25 October 2025">
          </div>
          <div class="form-group">
            <label>Venue</label>
            <input type="text" id="coverVenue" placeholder="e.g. Globe Theatre">
          </div>
          <div class="form-group">
            <label>Director</label>
            <input type="text" id="coverDirector" placeholder="Director name">
          </div>
          <div class="form-group">
            <label>Synopsis</label>
            <textarea id="coverSynopsis" placeholder="Brief description of the play"></textarea>
          </div>
          <div class="form-group">
            <label>Cover Image</label>
            <div class="image-upload" onclick="document.getElementById('coverImageFile').click()">
              <div id="coverImagePreview">Click to upload cover image</div>
              <input type="file" id="coverImageFile" accept="image/*" style="display: none;">
            </div>
          </div>
          <div class="form-group">
            <label>Contact Information</label>
            <textarea id="coverContact" placeholder="Box office, phone, website, etc."></textarea>
          </div>
          <div class="live-preview" id="coverPreview">
            <!-- Live preview will appear here -->
          </div>
          <div class="editor-actions">
            <button class="btn-primary" onclick="savePage('cover')">Save Page</button>
            <button class="btn-secondary" onclick="cancelEdit()">Cancel</button>
          </div>
        </div>
        
        <div id="paragraphEditor" class="page-editor">
          <h3>📝 Paragraph</h3>
          
          <!-- Programme builder enhancement - Per-page color customization -->
          <div class="color-controls" style="display: flex; gap: 20px; margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 6px; border: 1px solid #e0e0e0;">
            <div class="form-group" style="margin-bottom: 0; flex: 1;">
              <label style="margin-bottom: 5px; font-size: 0.9em;">Background Color</label>
              <input type="color" id="paragraphBackgroundColor" value="#ffffff" style="width: 100%; height: 40px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
            </div>
            <div class="form-group" style="margin-bottom: 0; flex: 1;">
              <label style="margin-bottom: 5px; font-size: 0.9em;">Text Color</label>
              <input type="color" id="paragraphTextColor" value="#2c2c2c" style="width: 100%; height: 40px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
            </div>
          </div>
          
          <div class="form-group">
            <label>Page Title</label>
            <input type="text" id="paragraphTitle" placeholder="Enter page title">
          </div>
          <div class="form-group">
            <label>Content</label>
            <textarea id="paragraphContent" rows="8" placeholder="Enter your text content here..."></textarea>
          </div>
          <div class="form-group">
            <label>Image (Optional)</label>
            <div class="image-upload" onclick="document.getElementById('paragraphImageFile').click()">
              <div id="paragraphImagePreview">Click to upload image</div>
              <input type="file" id="paragraphImageFile" accept="image/*" style="display: none;">
            </div>
          </div>
          <div class="form-group">
            <label>Image Position</label>
            <select id="paragraphImagePos">
              <option value="below">Below text</option>
              <option value="above">Above text</option>
              <option value="right">Right side</option>
              <option value="left">Left side</option>
            </select>
          </div>
          <div class="live-preview" id="paragraphPreview">
            <!-- Live preview will appear here -->
          </div>
          <div class="editor-actions">
            <button class="btn-primary" onclick="savePage('paragraph')">Save Page</button>
            <button class="btn-secondary" onclick="cancelEdit()">Cancel</button>
          </div>
        </div>
        
        <div id="creditsEditor" class="page-editor">
          <h3>📋 List</h3>
          
          <!-- Programme builder enhancement - Per-page color customization -->
          <div class="color-controls" style="display: flex; gap: 20px; margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 6px; border: 1px solid #e0e0e0;">
            <div class="form-group" style="margin-bottom: 0; flex: 1;">
              <label style="margin-bottom: 5px; font-size: 0.9em;">Background Color</label>
              <input type="color" id="creditsBackgroundColor" value="#ffffff" style="width: 100%; height: 40px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
            </div>
            <div class="form-group" style="margin-bottom: 0; flex: 1;">
              <label style="margin-bottom: 5px; font-size: 0.9em;">Text Color</label>
              <input type="color" id="creditsTextColor" value="#2c2c2c" style="width: 100%; height: 40px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
            </div>
          </div>
          
          <div class="form-group">
            <label>Page Title</label>
            <input type="text" id="creditsTitle" placeholder="e.g. Cast & Crew, Acknowledgments">
          </div>
          <div class="form-group">
            <label>List Type</label>
            <select id="creditsType">
              <option value="cast">Cast (Name - Role)</option>
              <option value="crew">Crew (Name - Role)</option>
              <option value="simple">Simple List</option>
              <option value="sponsors">Sponsors/Thanks</option>
            </select>
          </div>
          <div class="form-group">
            <label>Entries</label>
            <div id="creditsEntries">
              <!-- Dynamic entries will be added here -->
            </div>
            <button type="button" class="btn-secondary" onclick="addCreditsEntry()">Add Entry</button>
          </div>
          <div class="live-preview" id="creditsPreview">
            <!-- Live preview will appear here -->
          </div>
          <div class="editor-actions">
            <button class="btn-primary" onclick="savePage('credits')">Save Page</button>
            <button class="btn-secondary" onclick="cancelEdit()">Cancel</button>
          </div>
        </div>
        
        <div id="imageGalleryEditor" class="page-editor">
          <h3>🖼️ Image Gallery</h3>
          
          <!-- Programme builder enhancement - Per-page color customization -->
          <div class="color-controls" style="display: flex; gap: 20px; margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 6px; border: 1px solid #e0e0e0;">
            <div class="form-group" style="margin-bottom: 0; flex: 1;">
              <label style="margin-bottom: 5px; font-size: 0.9em;">Background Color</label>
              <input type="color" id="galleryBackgroundColor" value="#ffffff" style="width: 100%; height: 40px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
            </div>
            <div class="form-group" style="margin-bottom: 0; flex: 1;">
              <label style="margin-bottom: 5px; font-size: 0.9em;">Text Color</label>
              <input type="color" id="galleryTextColor" value="#2c2c2c" style="width: 100%; height: 40px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
            </div>
          </div>
          
          <div class="form-group">
            <label>Page Title</label>
            <input type="text" id="galleryTitle" placeholder="Enter gallery title">
          </div>
          <div class="form-group">
            <label>Gallery Layout</label>
            <select id="galleryLayout">
              <option value="1">Single Image</option>
              <option value="2">Two Images</option>
              <option value="3">Three Images</option>
              <option value="4">Four Images</option>
            </select>
          </div>
          <div class="form-group">
            <label>Images</label>
            <div id="galleryImages">
              <!-- Dynamic image uploads will be added here -->
            </div>
          </div>
          <div class="live-preview" id="galleryPreview">
            <!-- Live preview will appear here -->
          </div>
          <div class="editor-actions">
            <button class="btn-primary" onclick="savePage('image-gallery')">Save Page</button>
            <button class="btn-secondary" onclick="cancelEdit()">Cancel</button>
          </div>
        </div>
        
        </div>
      
      <!-- Programme builder enhancement - A5 Real-size Preview Pane -->
      <div class="a5-preview-pane a5-preview-sticky">
        <div id="a5PreviewContainer"></div>
      </div>
      
      </div>
    </div>
  </div>
  
  <script src="/js/a5-preview.js"></script>
  <script>
    // Programme builder enhancement - Builder functionality
    
    // Global state
    let programmePages = [];
    let currentEditingPage = null;
    let pageIdCounter = 1;
    let a5Preview = null; // A5 preview component instance
    
    // Theme configuration
    const themes = {
      classic: { bg: '#ffffff', heading: '#1a1a1a', accent: '#0056b3', color: '#2c2c2c' },
      fairy:   { bg: '#fce4ec', heading: '#2e0854', accent: '#8e24aa', color: '#4a148c' },
      forest:  { bg: '#e8f5e8', heading: '#0d4014', accent: '#388e3c', color: '#1b5e20' },
      arabian: { bg: '#fff8e1', heading: '#bf360c', accent: '#ff9800', color: '#e65100' },
      spy:     { bg: '#f5f5f5', heading: '#000000', accent: '#424242', color: '#212121' },
      drama:   { bg: '#ffebee', heading: '#7f0000', accent: '#d32f2f', color: '#b71c1c' }
    };
    
    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize A5 preview component
      a5Preview = new A5Preview('a5PreviewContainer', {
        title: '📄 A5 Print Preview',
        showLabel: true,
        showOverflowWarning: true
      });
      
      setupEventListeners();
      updatePagesList();
      setupLivePreview();
    });
    
    function setupEventListeners() {
      // Template buttons
      document.querySelectorAll('.template-button').forEach(btn => {
        btn.addEventListener('click', () => editPage(btn.dataset.template));
      });
      
      // Theme selector
      document.getElementById('programmeTheme').addEventListener('change', updateAllPreviews);
      
      // Programme builder enhancement - Color picker event listeners
      const colorInputs = ['coverBackgroundColor', 'coverTextColor', 'paragraphBackgroundColor', 'paragraphTextColor', 
                          'creditsBackgroundColor', 'creditsTextColor', 'galleryBackgroundColor', 'galleryTextColor'];
      colorInputs.forEach(inputId => {
        const input = document.getElementById(inputId);
        if (input) {
          input.addEventListener('change', updateAllPreviews);
          input.addEventListener('input', updateAllPreviews);
        }
      });
      
      // File upload previews
      setupFilePreview('coverImageFile', 'coverImagePreview');
      setupFilePreview('paragraphImageFile', 'paragraphImagePreview');
      
      // Gallery layout change
      document.getElementById('galleryLayout').addEventListener('change', updateGalleryInputs);
      
      // Export button
      document.getElementById('exportProgrammeBtn').addEventListener('click', exportProgramme);
      
      // Preview button
      document.getElementById('previewProgrammeBtn').addEventListener('click', previewFullProgramme);
    }
    
    function setupLivePreview() {
      // Programme builder enhancement - Live preview for 4 allowed templates only
      const editors = ['cover', 'paragraph', 'credits', 'image-gallery'];
      editors.forEach(editor => {
        const editorId = editor === 'image-gallery' ? 'imageGalleryEditor' : editor.replace('-', '') + 'Editor';
        const editorEl = document.getElementById(editorId);
        if (editorEl) {
          editorEl.addEventListener('input', () => updatePreview(editor));
          editorEl.addEventListener('change', () => updatePreview(editor));
        }
      });
    }
    
    function setupFilePreview(fileInputId, previewId) {
      document.getElementById(fileInputId).addEventListener('change', function(e) {
        const file = e.target.files[0];
        const preview = document.getElementById(previewId);
        if (file) {
          const reader = new FileReader();
          reader.onload = function(event) {
            preview.innerHTML = `<img src="${event.target.result}" class="image-preview" alt="Preview">`;
            preview.parentElement.classList.add('has-image');
          };
          reader.readAsDataURL(file);
        } else {
          preview.innerHTML = 'Click to upload image';
          preview.parentElement.classList.remove('has-image');
        }
      });
    }
    
    function editPage(template, pageId = null) {
      // Hide all editors and empty state
      document.getElementById('emptyState').style.display = 'none';
      document.querySelectorAll('.page-editor').forEach(editor => editor.classList.remove('active'));
      
      // Programme builder enhancement - Handle editor ID mapping for image-gallery
      const editorId = template === 'image-gallery' ? 'imageGalleryEditor' : template + 'Editor';
      const editor = document.getElementById(editorId);
      if (editor) {
        editor.classList.add('active');
        currentEditingPage = { template, id: pageId };
        
        // If editing existing page, load data
        if (pageId) {
          loadPageData(pageId);
        } else {
          clearEditor(template);
        }
        
        // Setup specific editor features
        if (template === 'credits') {
          setupCreditsEditor();
        } else if (template === 'image-gallery') {
          updateGalleryInputs();
        }
        
        // Update preview
        updatePreview(template);
      }
    }
    
    function clearEditor(template) {
      const editorId = template === 'image-gallery' ? 'imageGalleryEditor' : template.replace('-', '') + 'Editor';
      const editor = document.getElementById(editorId);
      if (!editor) return;
      
      editor.querySelectorAll('input, textarea, select').forEach(input => {
        if (input.type === 'file') {
          input.value = '';
        } else if (input.type === 'color') {
          // Programme builder enhancement - Reset color inputs to defaults
          if (input.id.includes('Background')) {
            input.value = '#ffffff';
          } else if (input.id.includes('Text')) {
            input.value = '#2c2c2c';
          }
        } else {
          input.value = '';
        }
      });
      
      // Clear image previews
      editor.querySelectorAll('.image-upload').forEach(upload => {
        const preview = upload.querySelector('div');
        if (preview) {
          preview.innerHTML = preview.innerHTML.includes('cover') ? 'Click to upload cover image' :
                             preview.innerHTML.includes('featured') ? 'Click to upload featured image' :
                             preview.innerHTML.includes('full-page') ? 'Click to upload full-page image' :
                             'Click to upload image';
        }
        upload.classList.remove('has-image');
      });
      
      // Clear dynamic content
      if (template === 'credits') {
        document.getElementById('creditsEntries').innerHTML = '';
        addCreditsEntry(); // Add one default entry
      } else if (template === 'image-gallery') {
        updateGalleryInputs();
      }
    }
    
    function loadPageData(pageId) {
      const page = programmePages.find(p => p.id === pageId);
      if (!page) return;
      
      // Load data based on page template
      const template = page.template;
      Object.keys(page.data).forEach(key => {
        const element = document.getElementById(key);
        if (element) {
          element.value = page.data[key];
        }
      });
      
      // Handle special cases for dynamic content
      if (template === 'credits' && page.data.entries) {
        setupCreditsEditor(page.data.entries);
      }
    }
    
    function savePage(template) {
      const pageData = collectPageData(template);
      const pageTitle = getPageTitle(template, pageData);
      
      if (currentEditingPage && currentEditingPage.id) {
        // Update existing page
        const page = programmePages.find(p => p.id === currentEditingPage.id);
        if (page) {
          page.data = pageData;
          page.title = pageTitle;
        }
      } else {
        // Add new page
        const newPage = {
          id: pageIdCounter++,
          template: template,
          title: pageTitle,
          data: pageData,
          order: programmePages.length
        };
        programmePages.push(newPage);
      }
      
      updatePagesList();
      cancelEdit();
      
      // Show success message
      showNotification('Page saved successfully!', 'success');
    }
    
    function collectPageData(template) {
      const data = {};
      const editorId = template === 'image-gallery' ? 'imageGalleryEditor' : template + 'Editor';
      const editor = document.getElementById(editorId);
      
      // Collect form data
      editor.querySelectorAll('input, textarea, select').forEach(input => {
        if (input.type === 'file') {
          if (input.files[0]) {
            data[input.id] = {
              file: input.files[0],
              url: URL.createObjectURL(input.files[0])
            };
          }
        } else {
          data[input.id] = input.value;
        }
      });
      
      // Handle special cases
      if (template === 'credits') {
        data.entries = collectCreditsEntries();
      } else if (template === 'image-gallery') {
        data.images = collectGalleryImages();
      }
      
      return data;
    }
    
    function getPageTitle(template, data) {
      switch (template) {
        case 'cover':
          return data.coverPlayName || 'Cover Page';
        case 'paragraph':
          return data.paragraphTitle || 'Paragraph Page';
        case 'credits':
          return data.creditsTitle || 'List';
        case 'image-gallery':
          return data.galleryTitle || 'Image Gallery';
        default:
          return 'Page';
      }
    }
    
    function updatePagesList() {
      const pagesList = document.getElementById('pagesList');
      const pageCount = document.getElementById('pageCount');
      
      pageCount.textContent = programmePages.length;
      
      if (programmePages.length === 0) {
        pagesList.innerHTML = '<p style="color: #999; font-style: italic;">No pages added yet</p>';
        return;
      }
      
      // Sort pages by order
      const sortedPages = [...programmePages].sort((a, b) => a.order - b.order);
      
      pagesList.innerHTML = sortedPages.map(page => `
        <div class="page-item" draggable="true" data-page-id="${page.id}">
          <div class="page-info">
            <div class="page-title">${page.title}</div>
            <div class="page-type">${getTemplateDisplayName(page.template)}</div>
          </div>
          <div class="page-actions">
            <button class="page-action edit-btn" onclick="editPage('${page.template}', ${page.id})">Edit</button>
            <button class="page-action preview-btn" onclick="previewPage(${page.id})">Preview</button>
            <button class="page-action delete-btn" onclick="deletePage(${page.id})">Delete</button>
          </div>
        </div>
      `).join('');
      
      // Setup drag and drop for reordering
      setupPageReordering();
    }
    
    function getTemplateDisplayName(template) {
      // Programme builder enhancement - Updated display names for 4 templates
      const names = {
        'cover': 'Cover',
        'paragraph': 'Paragraph',
        'credits': 'List',
        'image-gallery': 'Image Gallery'
      };
      return names[template] || template;
    }
    
    function setupPageReordering() {
      const pageItems = document.querySelectorAll('.page-item');
      pageItems.forEach(item => {
        item.addEventListener('dragstart', handleDragStart);
        item.addEventListener('dragover', handleDragOver);
        item.addEventListener('drop', handleDrop);
        item.addEventListener('dragend', handleDragEnd);
      });
    }
    
    let draggedElement = null;
    
    function handleDragStart(e) {
      draggedElement = this;
      this.classList.add('dragging');
      e.dataTransfer.effectAllowed = 'move';
    }
    
    function handleDragOver(e) {
      e.preventDefault();
      e.dataTransfer.dropEffect = 'move';
    }
    
    function handleDrop(e) {
      e.preventDefault();
      if (this !== draggedElement) {
        const draggedId = parseInt(draggedElement.dataset.pageId);
        const targetId = parseInt(this.dataset.pageId);
        reorderPages(draggedId, targetId);
      }
    }
    
    function handleDragEnd(e) {
      this.classList.remove('dragging');
      draggedElement = null;
    }
    
    function reorderPages(draggedId, targetId) {
      const draggedPage = programmePages.find(p => p.id === draggedId);
      const targetPage = programmePages.find(p => p.id === targetId);
      
      if (draggedPage && targetPage) {
        const tempOrder = draggedPage.order;
        draggedPage.order = targetPage.order;
        targetPage.order = tempOrder;
        
        updatePagesList();
        showNotification('Pages reordered successfully!', 'success');
      }
    }
    
    function deletePage(pageId) {
      if (confirm('Are you sure you want to delete this page?')) {
        programmePages = programmePages.filter(p => p.id !== pageId);
        updatePagesList();
        
        // If currently editing this page, cancel edit
        if (currentEditingPage && currentEditingPage.id === pageId) {
          cancelEdit();
        }
        
        showNotification('Page deleted successfully!', 'success');
      }
    }
    
    function cancelEdit() {
      document.querySelectorAll('.page-editor').forEach(editor => editor.classList.remove('active'));
      document.getElementById('emptyState').style.display = programmePages.length === 0 ? 'block' : 'none';
      currentEditingPage = null;
    }
    
    function updatePreview(template) {
      const preview = document.getElementById(template.replace('-', '') + 'Preview') || 
                     document.getElementById(template.replace('-', '') + 'LivePreview');
      if (!preview) return;
      
      const theme = themes[document.getElementById('programmeTheme').value] || themes.classic;
      const data = collectPageData(template);
      
      // Programme builder enhancement - Use custom colors if set
      let customBg = '#ffffff';
      let customText = '#2c2c2c';
      
      if (template === 'cover') {
        customBg = data.coverBackgroundColor || '#ffffff';
        customText = data.coverTextColor || '#2c2c2c';
      } else if (template === 'paragraph') {
        customBg = data.paragraphBackgroundColor || '#ffffff';
        customText = data.paragraphTextColor || '#2c2c2c';
      } else if (template === 'credits') {
        customBg = data.creditsBackgroundColor || '#ffffff';
        customText = data.creditsTextColor || '#2c2c2c';
      } else if (template === 'image-gallery') {
        customBg = data.galleryBackgroundColor || '#ffffff';
        customText = data.galleryTextColor || '#2c2c2c';
      }
      
      const customTheme = { ...theme, bg: customBg, color: customText, heading: customText };
      
      let previewHTML = '';
      
      switch (template) {
        case 'cover':
          previewHTML = generateCoverPreview(data, customTheme);
          break;
        case 'paragraph':
          previewHTML = generateParagraphPreview(data, customTheme);
          break;
        case 'credits':
          previewHTML = generateCreditsPreview(data, customTheme);
          break;
        case 'image-gallery':
          previewHTML = generateGalleryPreview(data, customTheme);
          break;
      }
      
      preview.innerHTML = `
        <div style="background: ${customBg}; padding: 20px; border-radius: 8px; color: ${customText}; border: 1px solid #e0e0e0;">
          <h4 style="margin-top: 0; color: ${customText};">Live Preview (A5 Size)</h4>
          ${previewHTML}
        </div>
      `;
      
      // Programme builder enhancement - Update A5 real-size preview
      updateA5Preview(template, data, customTheme, customBg);
    }
    
    function generateCoverPreview(data, theme) {
      return `
        <div style="text-align: center;">
          ${data.coverImageFile ? `<img src="${data.coverImageFile.url}" style="max-width: 200px; max-height: 150px; border-radius: 6px; margin-bottom: 15px;">` : ''}
          <h2 style="color: ${theme.heading}; margin: 10px 0;">${data.coverPlayName || 'Play Name'}</h2>
          <p style="color: ${theme.accent}; font-weight: bold; margin: 5px 0;">${data.coverDate || 'Date'}</p>
          <p style="color: ${theme.accent}; font-weight: bold; margin: 5px 0;">${data.coverVenue || 'Venue'}</p>
          <p style="color: ${theme.accent}; margin: 5px 0;">Director: ${data.coverDirector || 'Director'}</p>
          ${data.coverSynopsis ? `<p style="margin: 15px 0; font-style: italic;">${data.coverSynopsis}</p>` : ''}
          ${data.coverContact ? `<div style="margin: 15px 0; font-size: 0.9em;">${data.coverContact.replace(/\n/g, '<br>')}</div>` : ''}
        </div>
      `;
    }
    
    function generateParagraphPreview(data, theme) {
      const imageHTML = data.paragraphImageFile ? 
        `<img src="${data.paragraphImageFile.url}" style="max-width: 150px; max-height: 150px; border-radius: 6px;">` : '';
      
      const contentHTML = `
        <h3 style="color: ${theme.heading}; margin-top: 0;">${data.paragraphTitle || 'Page Title'}</h3>
        <div style="line-height: 1.6;">${data.paragraphContent ? data.paragraphContent.replace(/\n/g, '<br>') : 'Content will appear here...'}</div>
      `;
      
      if (!imageHTML) return contentHTML;
      
      switch (data.paragraphImagePos) {
        case 'above':
          return `<div style="text-align: center; margin-bottom: 15px;">${imageHTML}</div>${contentHTML}`;
        case 'below':
          return `${contentHTML}<div style="text-align: center; margin-top: 15px;">${imageHTML}</div>`;
        case 'right':
          return `<div style="display: flex; gap: 15px; align-items: flex-start;"><div style="flex: 1;">${contentHTML}</div><div>${imageHTML}</div></div>`;
        case 'left':
          return `<div style="display: flex; gap: 15px; align-items: flex-start;"><div>${imageHTML}</div><div style="flex: 1;">${contentHTML}</div></div>`;
        default:
          return `${contentHTML}<div style="text-align: center; margin-top: 15px;">${imageHTML}</div>`;
      }
    }
    
    function generateCreditsPreview(data, theme) {
      const entries = data.entries || [];
      if (entries.length === 0) {
        return `
          <h3 style="color: ${theme.heading}; margin-top: 0;">${data.creditsTitle || 'Credits'}</h3>
          <p style="color: #999; font-style: italic;">Add entries to see preview...</p>
        `;
      }
      
      const listHTML = entries.map(entry => {
        if (data.creditsType === 'simple') {
          return `<li>${entry.name || entry.text || ''}</li>`;
        } else {
          return `<li>${entry.name || ''} ${entry.role ? `- ${entry.role}` : ''}</li>`;
        }
      }).join('');
      
      return `
        <h3 style="color: ${theme.heading}; margin-top: 0;">${data.creditsTitle || 'Credits'}</h3>
        <ul style="list-style: none; padding: 0; text-align: center;">
          ${listHTML}
        </ul>
      `;
    }
    
    function generateGalleryPreview(data, theme) {
      const images = data.images || [];
      const layout = data.galleryLayout || '1';
      const cols = layout === '4' ? 2 : layout === '3' ? 3 : layout === '2' ? 2 : 1;
      
      const imageHTML = images.map(img => 
        img ? `<img src="${img.url}" style="width: 100%; height: 100px; object-fit: cover; border-radius: 4px;">` : 
              '<div style="width: 100%; height: 100px; background: #f0f0f0; border-radius: 4px; display: flex; align-items: center; justify-content: center; color: #999;">No image</div>'
      ).join('');
      
      return `
        <h3 style="color: ${theme.heading}; margin-top: 0;">${data.galleryTitle || 'Image Gallery'}</h3>
        <div style="display: grid; grid-template-columns: repeat(${cols}, 1fr); gap: 10px;">
          ${imageHTML}
        </div>
      `;
    }
    
    
    function updateAllPreviews() {
      const activeEditor = document.querySelector('.page-editor.active');
      if (activeEditor) {
        const template = activeEditor.id.replace('Editor', '').replace('imageGallery', 'image-gallery');
        updatePreview(template);
      }
    }
    
    function previewPage(pageId) {
      const page = programmePages.find(p => p.id === pageId);
      if (!page) return;
      
      // Open preview in new window
      const previewWindow = window.open('', '_blank', 'width=800,height=1000');
      const theme = themes[document.getElementById('programmeTheme').value] || themes.classic;
      
      // Programme builder enhancement - Use custom colors in preview
      let customBg = page.data.coverBackgroundColor || page.data.paragraphBackgroundColor || 
                     page.data.creditsBackgroundColor || page.data.galleryBackgroundColor || '#ffffff';
      let customText = page.data.coverTextColor || page.data.paragraphTextColor || 
                       page.data.creditsTextColor || page.data.galleryTextColor || '#2c2c2c';
      
      const customTheme = { ...theme, bg: customBg, color: customText, heading: customText };
      
      let previewHTML = '';
      switch (page.template) {
        case 'cover':
          previewHTML = generateCoverPreview(page.data, customTheme);
          break;
        case 'paragraph':
          previewHTML = generateParagraphPreview(page.data, customTheme);
          break;
        case 'credits':
          previewHTML = generateCreditsPreview(page.data, customTheme);
          break;
        case 'image-gallery':
          previewHTML = generateGalleryPreview(page.data, customTheme);
          break;
      }
      
      previewWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>Page Preview - ` + page.title + `</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .page { 
              background: ` + customBg + `; 
              padding: 40px; 
              border-radius: 8px; 
              color: ` + customText + `; 
              max-width: 420px; 
              max-height: 595px; /* A5 dimensions */ 
              margin: 0 auto; 
              box-shadow: 0 4px 12px rgba(0,0,0,0.1);
              overflow: auto;
            }
          </style>
        </head>
        <body>
          <div class="page">
            ` + previewHTML + `
          </div>
        </body>
        </html>
      `);
    }
    
    // Programme builder enhancement - A5 Real-size Preview Function
    function updateA5Preview(template, data, customTheme, customBg) {
      if (!a5Preview) return;
      
      let previewHTML = '';
      
      switch (template) {
        case 'cover':
          previewHTML = generateA5CoverPreview(data, customTheme);
          break;
        case 'paragraph':
          previewHTML = generateA5ParagraphPreview(data, customTheme);
          break;
        case 'credits':
          previewHTML = generateA5CreditsPreview(data, customTheme);
          break;
        case 'image-gallery':
          previewHTML = generateA5GalleryPreview(data, customTheme);
          break;
        default:
          previewHTML = `<div style="text-align: center; color: #999; padding: 100px 20px;">Select a page to preview</div>`;
      }
      
      // Update the A5 preview with the new content and styles
      a5Preview.updateContent(previewHTML, {
        backgroundColor: customBg,
        color: customTheme.color
      });
    }
    
    // Programme builder enhancement - A5-specific preview generators
    function generateA5CoverPreview(data, theme) {
      return `
        <div style="text-align: center; height: 100%; display: flex; flex-direction: column; justify-content: center;">
          ${data.coverImageFile ? `<div style="margin-bottom: 15px;"><img src="${data.coverImageFile.url}" style="max-width: 180px; max-height: 120px; border-radius: 4px; object-fit: cover;"></div>` : ''}
          <h1 style="color: ${theme.heading}; margin: 15px 0; font-size: 18px; font-weight: bold; line-height: 1.2;">${data.coverPlayName || 'Play Name'}</h1>
          <p style="color: ${theme.accent || theme.color}; font-weight: bold; margin: 8px 0; font-size: 13px;">${data.coverDate || 'Date'}</p>
          <p style="color: ${theme.accent || theme.color}; font-weight: bold; margin: 8px 0; font-size: 13px;">${data.coverVenue || 'Venue'}</p>
          <p style="color: ${theme.accent || theme.color}; margin: 8px 0; font-size: 12px;">Directed by ${data.coverDirector || 'Director'}</p>
          ${data.coverSynopsis ? `<p style="margin: 15px 0; font-style: italic; font-size: 11px; line-height: 1.4; max-height: 60px; overflow: hidden;">${data.coverSynopsis}</p>` : ''}
          ${data.coverContact ? `<div style="margin-top: auto; font-size: 10px; line-height: 1.3; max-height: 40px; overflow: hidden;">${data.coverContact.replace(/\n/g, '<br>')}</div>` : ''}
        </div>
      `;
    }
    
    function generateA5ParagraphPreview(data, theme) {
      const imageHTML = data.paragraphImageFile ? 
        `<img src="${data.paragraphImageFile.url}" style="max-width: 100px; max-height: 100px; border-radius: 4px; object-fit: cover;">` : '';
      
      const contentHTML = `
        <h2 style="color: ${theme.heading}; margin: 0 0 15px 0; font-size: 16px; font-weight: bold;">${data.paragraphTitle || 'Page Title'}</h2>
        <div style="line-height: 1.5; font-size: 11px; text-align: justify;">${data.paragraphContent ? data.paragraphContent.replace(/\n/g, '<br>') : 'Content will appear here...'}</div>
      `;
      
      if (!imageHTML) return contentHTML;
      
      switch (data.paragraphImagePos) {
        case 'above':
          return `<div style="text-align: center; margin-bottom: 15px;">${imageHTML}</div>${contentHTML}`;
        case 'below':
          return `${contentHTML}<div style="text-align: center; margin-top: 15px;">${imageHTML}</div>`;
        case 'right':
          return `<div style="display: flex; gap: 15px; align-items: flex-start;"><div style="flex: 1; min-width: 0;">${contentHTML}</div><div style="flex-shrink: 0;">${imageHTML}</div></div>`;
        case 'left':
          return `<div style="display: flex; gap: 15px; align-items: flex-start;"><div style="flex-shrink: 0;">${imageHTML}</div><div style="flex: 1; min-width: 0;">${contentHTML}</div></div>`;
        default:
          return `${contentHTML}<div style="text-align: center; margin-top: 15px;">${imageHTML}</div>`;
      }
    }
    
    function generateA5CreditsPreview(data, theme) {
      const entries = data.entries || [];
      if (entries.length === 0) {
        return `
          <h2 style="color: ${theme.heading}; margin: 0 0 20px 0; font-size: 16px; font-weight: bold; text-align: center;">${data.creditsTitle || 'Credits'}</h2>
          <p style="text-align: center; color: #999; font-size: 11px;">No entries added yet</p>
        `;
      }
      
      const creditsType = data.creditsType || 'detailed';
      let listHTML = '';
      
      if (creditsType === 'simple') {
        listHTML = entries.map(entry => 
          `<div style="text-align: center; margin-bottom: 8px; font-size: 11px;">${entry.text || ''}</div>`
        ).join('');
      } else {
        listHTML = entries.map(entry => 
          `<div style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 11px;">
            <span style="font-weight: bold;">${entry.name || ''}</span>
            <span>${entry.role || ''}</span>
          </div>`
        ).join('');
      }
      
      return `
        <h2 style="color: ${theme.heading}; margin: 0 0 20px 0; font-size: 16px; font-weight: bold; text-align: center;">${data.creditsTitle || 'Credits'}</h2>
        <div>${listHTML}</div>
      `;
    }
    
    function generateA5GalleryPreview(data, theme) {
      const images = [];
      for (let i = 1; i <= 4; i++) {
        if (data[`galleryImage${i}`]) {
          images.push(data[`galleryImage${i}`]);
        }
      }
      
      if (images.length === 0) {
        return `
          <h2 style="color: ${theme.heading}; margin: 0 0 20px 0; font-size: 16px; font-weight: bold; text-align: center;">${data.galleryTitle || 'Image Gallery'}</h2>
          <div style="text-align: center; color: #999; font-size: 11px; padding: 60px 20px;">No images added yet</div>
        `;
      }
      
      const layout = data.galleryLayout || 'grid';
      let galleryHTML = '';
      
      switch (layout) {
        case 'single':
          galleryHTML = `<div style="text-align: center;"><img src="${images[0].url}" style="max-width: 200px; max-height: 280px; border-radius: 4px; object-fit: cover;"></div>`;
          break;
        case 'horizontal':
          galleryHTML = `<div style="display: flex; gap: 8px; justify-content: center; flex-wrap: wrap;">
            ${images.slice(0, 2).map(img => `<img src="${img.url}" style="width: 110px; height: 110px; border-radius: 4px; object-fit: cover;">`).join('')}
          </div>`;
          break;
        case 'grid':
        default:
          const gridCols = images.length <= 2 ? images.length : 2;
          galleryHTML = `<div style="display: grid; grid-template-columns: repeat(${gridCols}, 1fr); gap: 8px; justify-items: center;">
            ${images.slice(0, 4).map(img => `<img src="${img.url}" style="width: 100px; height: 100px; border-radius: 4px; object-fit: cover;">`).join('')}
          </div>`;
      }
      
      return `
        <h2 style="color: ${theme.heading}; margin: 0 0 15px 0; font-size: 16px; font-weight: bold; text-align: center;">${data.galleryTitle || 'Image Gallery'}</h2>
        ${galleryHTML}
        ${data.galleryDescription ? `<p style="margin-top: 15px; font-size: 10px; text-align: center; line-height: 1.4;">${data.galleryDescription}</p>` : ''}
      `;
    }
    
    // Programme builder enhancement - Specific editor setup functions
    function setupCreditsEditor(existingEntries = null) {
      const container = document.getElementById('creditsEntries');
      container.innerHTML = '';
      
      if (existingEntries && existingEntries.length > 0) {
        existingEntries.forEach(entry => addCreditsEntry(entry));
      } else {
        addCreditsEntry(); // Add one default entry
      }
    }
    
    function addCreditsEntry(data = {}) {
      const container = document.getElementById('creditsEntries');
      const entryDiv = document.createElement('div');
      entryDiv.className = 'credits-entry';
      entryDiv.style.cssText = 'display: flex; gap: 10px; margin-bottom: 10px; align-items: center;';
      
      const creditsType = document.getElementById('creditsType').value;
      
      if (creditsType === 'simple') {
        entryDiv.innerHTML = `
          <input type="text" placeholder="List item" value="${data.text || ''}" style="flex: 1;">
          <button type="button" onclick="this.parentElement.remove(); updatePreview('credits');" style="padding: 5px 10px; background: #dc3545; color: white; border: none; border-radius: 3px;">Remove</button>
        `;
      } else {
        entryDiv.innerHTML = `
          <input type="text" placeholder="Name" value="${data.name || ''}" style="flex: 1;">
          <input type="text" placeholder="Role" value="${data.role || ''}" style="flex: 1;">
          <button type="button" onclick="this.parentElement.remove(); updatePreview('credits');" style="padding: 5px 10px; background: #dc3545; color: white; border: none; border-radius: 3px;">Remove</button>
        `;
      }
      
      container.appendChild(entryDiv);
      
      // Add input event listeners for live preview
      entryDiv.querySelectorAll('input').forEach(input => {
        input.addEventListener('input', () => updatePreview('credits'));
      });
    }
    
    function collectCreditsEntries() {
      const entries = [];
      document.querySelectorAll('#creditsEntries .credits-entry').forEach(entry => {
        const inputs = entry.querySelectorAll('input');
        if (inputs.length === 1) {
          // Simple list
          const text = inputs[0].value.trim();
          if (text) entries.push({ text });
        } else {
          // Name-role format
          const name = inputs[0].value.trim();
          const role = inputs[1].value.trim();
          if (name || role) entries.push({ name, role });
        }
      });
      return entries;
    }
    
    function updateGalleryInputs() {
      const layout = document.getElementById('galleryLayout').value;
      const container = document.getElementById('galleryImages');
      const imageCount = parseInt(layout);
      
      container.innerHTML = '';
      
      for (let i = 0; i < imageCount; i++) {
        const imageDiv = document.createElement('div');
        imageDiv.style.cssText = 'margin-bottom: 15px; padding: 15px; border: 1px solid #ddd; border-radius: 6px; background: #f9f9f9;';
        imageDiv.innerHTML = `
          <label style="display: block; margin-bottom: 5px;">Image ${i + 1}:</label>
          <div class="image-upload" onclick="document.getElementById('galleryImage${i}').click()">
            <div id="galleryImagePreview${i}">Click to upload image ${i + 1}</div>
            <input type="file" id="galleryImage${i}" accept="image/*" style="display: none;">
          </div>
        `;
        container.appendChild(imageDiv);
        
        // Setup file preview
        setupFilePreview(`galleryImage${i}`, `galleryImagePreview${i}`);
        
        // Add change listener for live preview
        document.getElementById(`galleryImage${i}`).addEventListener('change', () => updatePreview('image-gallery'));
      }
    }
    
    function collectGalleryImages() {
      const images = [];
      const layout = document.getElementById('galleryLayout').value;
      const imageCount = parseInt(layout);
      
      for (let i = 0; i < imageCount; i++) {
        const input = document.getElementById(`galleryImage${i}`);
        if (input && input.files[0]) {
          images.push({
            file: input.files[0],
            url: URL.createObjectURL(input.files[0])
          });
        } else {
          images.push(null);
        }
      }
      
      return images;
    }
    
    function previewFullProgramme() {
      if (programmePages.length === 0) {
        alert('No pages to preview. Add some pages first.');
        return;
      }
      
      // Open full programme preview in new window
      const previewWindow = window.open('', '_blank', 'width=1000,height=1200');
      const theme = themes[document.getElementById('programmeTheme').value] || themes.classic;
      
      // Sort pages by order
      const sortedPages = [...programmePages].sort((a, b) => a.order - b.order);
      
      const pagesHTML = sortedPages.map(page => {
        // Programme builder enhancement - Use custom colors for each page
        let customBg = page.data.coverBackgroundColor || page.data.paragraphBackgroundColor || 
                       page.data.creditsBackgroundColor || page.data.galleryBackgroundColor || '#ffffff';
        let customText = page.data.coverTextColor || page.data.paragraphTextColor || 
                         page.data.creditsTextColor || page.data.galleryTextColor || '#2c2c2c';
        
        const customTheme = { ...theme, bg: customBg, color: customText, heading: customText };
        
        let pageHTML = '';
        switch (page.template) {
          case 'cover':
            pageHTML = generateCoverPreview(page.data, customTheme);
            break;
          case 'paragraph':
            pageHTML = generateParagraphPreview(page.data, customTheme);
            break;
          case 'credits':
            pageHTML = generateCreditsPreview(page.data, customTheme);
            break;
          case 'image-gallery':
            pageHTML = generateGalleryPreview(page.data, customTheme);
            break;
        }
        
        return '<div class="page" style="background: ' + customBg + '; padding: 40px; margin-bottom: 20px; border-radius: 8px; color: ' + customText + '; box-shadow: 0 4px 12px rgba(0,0,0,0.1); max-width: 420px; max-height: 595px; overflow: auto;">' + pageHTML + '</div>';
      }).join('');
      
      previewWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>Programme Preview</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .programme { max-width: 500px; margin: 0 auto; }
            h1 { text-align: center; color: #333; margin-bottom: 30px; }
            @media print { 
              body { margin: 0; background: white; } 
              .page { page-break-after: always; margin-bottom: 0; box-shadow: none; }
            }
          </style>
        </head>
        <body>
          <div class="programme">
            <h1>Programme Preview (A5 Size)</h1>
            ` + pagesHTML + `
          </div>
          <script>
            // Auto-focus for better printing
            window.addEventListener('load', () => {
              document.title = 'Programme Preview - Ready to Print';
            });
          <\/script>
        </body>
        </html>
      `);
    }
    
    function exportProgramme() {
      if (programmePages.length === 0) {
        alert('No pages to export. Add some pages first.');
        return;
      }
      
      // Get the current theme
      const theme = document.getElementById('programmeTheme').value;
      
      // Prepare data for server
      const exportData = {
        theme: theme,
        pages: programmePages
      };
      
      // Show loading state
      const exportBtn = document.getElementById('exportProgrammeBtn');
      const originalText = exportBtn.textContent;
      exportBtn.textContent = 'Generating PDF...';
      exportBtn.disabled = true;
      
      // Send to server for PDF generation
      fetch('/builder/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(exportData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to generate PDF');
        }
        return response.blob();
      })
      .then(blob => {
        // Create download link
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `programme-${Date.now()}.pdf`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        showNotification('PDF generated successfully!', 'success');
      })
      .catch(error => {
        console.error('Error generating PDF:', error);
        showNotification('Error generating PDF. Please try again.', 'error');
      })
      .finally(() => {
        // Reset button
        exportBtn.textContent = originalText;
        exportBtn.disabled = false;
      });
    }
    
    function showNotification(message, type = 'info') {
      // Simple notification system
      const notification = document.createElement('div');
      const bgColor = type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff';
      notification.style.cssText = 
        'position: fixed; top: 20px; right: 20px; padding: 15px 20px; border-radius: 6px; color: white; font-weight: bold; z-index: 1000; background: ' + bgColor + '; box-shadow: 0 4px 12px rgba(0,0,0,0.2);';
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
  </script>
</body>
</html>